plugins {
    id "java"
    id "signing"
    id "application"
    id "maven-publish"
    id "net.ltgt.errorprone" version "2.0.2"
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

repositories {
    mavenCentral()
}

group = "io.opil"

java {
    withJavadocJar()
    withSourcesJar()
}

ext {
    guavaVersion = "31.0.1-jre"
    errorProneVer = "2.11.0"
    autoValueVer = "1.9"
    autoServiceVer = "1.0.1"
    junitVersion = "4.13.2"
    truthVersion = "1.1.3"
    compileTestVer = "0.19"

    modulePackage = "com.google.googlejavaformat"
    compilerExports = ["api", "file", "main", "parser", "tree", "util"]
    compilerOptions = compilerExports.plus("code").collect {
        "--add-exports=jdk.compiler/com.sun.tools.javac.${it}=ALL-UNNAMED"
    }
}

dependencies {
    implementation "com.google.guava:guava:${guavaVersion}"

    errorprone "com.google.errorprone:error_prone_core:${errorProneVer}"
    compileOnly "com.google.auto.value:auto-value-annotations:${autoValueVer}"
    annotationProcessor "com.google.auto.value:auto-value:${autoValueVer}"
    compileOnly "com.google.auto.service:auto-service-annotations:${autoServiceVer}"
    annotationProcessor "com.google.auto.service:auto-service:${autoServiceVer}"

    testImplementation "junit:junit:${junitVersion}"
    testImplementation "com.google.guava:guava-testlib:${guavaVersion}"
    testImplementation "com.google.truth:truth:${truthVersion}"
    testImplementation "com.google.truth.extensions:truth-java8-extension:${truthVersion}"
    testImplementation "com.google.testing.compile:compile-testing:${compileTestVer}"
}

application {
    mainClass = "${modulePackage}.java.Main"
}

jar {
    manifest {
        attributes (
            "Automatic-Module-Name": modulePackage,
            "Add-Exports": compilerExports.plus(["model", "processing"])
                .collect { "jdk.compiler/com.sun.tools.javac.${it}" }.join(" "),
            "Add-Opens": ["code", "comp"]
                .collect { "jdk.compiler/com.sun.tools.javac.${it}" }.join(" "),
            "Implementation-Version": project.version
        )
    }
}

sourceSets {
    main {
        java {
            if (JavaVersion.current() < JavaVersion.VERSION_14) {
                exclude "**/Java14InputAstVisitor.java"
            }
            srcDir "${buildDir}/generated-sources/java"
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava {
    options.compilerArgs += compilerOptions.plus("-XDcompilePolicy=simple")
}

javadoc {
    title = "Google Java Format API"
    compilerOptions.each {
        options.addBooleanOption it.substring(1), true
    }
}

test {
    jvmArgs compilerOptions
    systemProperty "file.encoding", "UTF-8"
}

[compileJava, compileTestJava, javadoc].each {
    it.options.encoding = "UTF-8"
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = "Modified Google Java Format"
                description = "A Java source code formatter that follows Google Java Style."
                url = "https://github.com/figroc/google-java-format"
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "figroc"
                        name = "P Chen"
                        email = "figroc@gmail.com"
                    }
                }
                scm {
                    url = "https://github.com/figroc/google-java-format"
                    connection = "scm:git:git://github.com/figroc/google-java-format.git"
                    developerConnection = "scm:git:ssh://git@github.com/figroc/google-java-format.git"
                }
                issueManagement {
                    system = "GitHub Issues"
                    url = "https://github.com/figroc/google-java-format/issues"
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username findProperty("sonatypeUsername")
                password findProperty("sonatypePassword")
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}
